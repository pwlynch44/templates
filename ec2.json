{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Template : Create an Amazon EC2 instance based upon the condition choosen from user. It will create instance with new/existing/default vpc and securityGroups.. This example creates an EC2 security group for the instance to give you SSH access. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",
  
  "Metadata" : {

  "service" : {
    "id": "CB_AWS_CF_EC2_S00",
    "name":"AWS EC2 Instance",
    "refId":"CB_AWS_CF_EC2",
    "provider":"Amazon",
    "serviceCategory": [
          {
            "id": "compute",
            "name": "Compute",
      "decsription" : "Compute"
          }
        ]
    },

	"ICBConfigExt":{

		"parameters":[
		{
			"parameterName": "sshKeyName",
			"allowedValues":{
				"type":"AWS::EC2::KeyPair::KeyName",
				"params":{}

			}

		},
    {
			"parameterName": "availabilityZone",
			"allowedValues":{
				"type":"AWS::EC2::AvailabilityZone::Name",
				"params":{}

			}

		},
    {
			"parameterName": "mySubnetIDs",
			"allowedValues":{
				"type":"AWS::EC2::Subnet::Id",
				"params":{}

			}

		},
    {
			"parameterName": "securityGroupIds",
			"allowedValues":{
				"type":"AWS::EC2::SecurityGroup::Id",
				"params":{}

			}

    },
    {
			"parameterName": "imageId",
      "required": false,
			"allowedValues":{
				"type":"AWS::EC2::Image::Id",
        "params":{
              "state":["available"],
              "image-type":["machine","kernel"],
              "is-public":["false"]
          }

			}

		},
		{
			"parameterName": "publicImageId",
			"required": false

		}
    ]   
    }
},



  "Parameters" : {
    "sshKeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "instanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t2.small",
      "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", 
"m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", 
"m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", 
"c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", 
"r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", 
"hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]
,
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "ImageType":{
      "Description" : "Image Type Public/Private",
      "Type" :"String",
      "Default":"Private",
      "ConstraintDescription":"Select either of the values",
      "AllowedValues":[
        "Public",
        "Private"
      ]
    },
    "imageId" : {
      "Description" : "Private AMI id",
      "Type" : "AWS::EC2::Image::Id",
      "ConstraintDescription" : "must be a valid Private AMI Id."
    },
    "publicImageId" : {
      "Description" : "Public AMI id",
      "Type" : "AWS::EC2::Image::Id",
      "ConstraintDescription" : "must be a valid Public AMI Id."
    },
    "resourceName" : {
      "Description" : "Name of the resource",
      "Type" : "String",
      "Default" : "EC2Instance",
      "ConstraintDescription" : "must be a string"
    },
	"ebsVolume" : {
	  "Description" : "size of the volume",
      "Type" : "String",
      "Default" : "20",
      "ConstraintDescription" : "must be a integer"
    },

  "deviceName" : { 
    "Description" : "Name of the Device",
      "Type" : "String",
      "Default" : "/dev/sdm"
    },
  "volumeType" : { 
    "Description" : "Type of Volume",
      "Type" : "String",
      "Default" : "io1",
      "AllowedValues" : ["gp2","io1","st1","sc1","standard"]
    },
  "deleteOnTermination" : { 
    "Description" : "Delete on Termination",
      "Type" : "String",
      "Default" : "false",
      "AllowedValues" : ["false","true"]
    },

	"availabilityZone" : {
      "Description": "AvailabilityZone Zone of the Subnet",
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "ConstraintDescription" : "must be a valid availabilityZone."
    },
	"SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
	"mySubnetIDs" : {
	  "Type" : "AWS::EC2::Subnet::Id",
	  "Description" : "The list of SubnetIds, for at least two Availability Zones in the region in your Virtual Private Cloud (VPC)",
	  "ConstraintDescription": "must be list of EC2 subnet ids"
	},
	"securityGroupIds": {
      "Description": "Security groups that can be used to access the EC2 instances",
      "Type": "AWS::EC2::SecurityGroup::Id",
      "ConstraintDescription": "must be list of EC2 security group ids"
    },
	"VPCCIDR": {
		"AllowedPattern": 
"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
		"ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
		"Default": "10.10.0.0/16",
		"Description": "CIDR block for entire VPC.",
		"Type": "String"
	},
	"PublicSubnetCIDR": {
	    "AllowedPattern": 
"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
	    "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
	    "Default": "10.10.10.0/24",
		"Description": "CIDR block for the public subnet",
		"Type": "String"
	},
	"PrivateSubnetCIDR": {
		"AllowedPattern": 
"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
		"ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
		"Default": "10.10.20.0/24",
		"Description": "CIDR block for the private subnet",
		"Type": "String"
	},
	"EnableDnsSupport": {
		"AllowedValues" : ["true","false"],
		"Description": "Specifies whether DNS resolution is supported for the VPC.",
		"Default": "true",
		"Type": "String"
    },
	"EnableDnsHostnames": {
		"AllowedValues" : ["true","false"],
		"Description": "Specifies whether the instances launched in the VPC get DNS hostnames.",
		"Default": "false",
		"Type": "String"
    },
	"InstanceTenancy": {
		"AllowedValues" : ["dedicated","default"],
		"Description": "Specifies whether the instances launched in the VPC get DNS hostnames.",
		"Default": "default",
		"Type": "String"
    },
	
	"SubnetName": {
		"MinLength": "5",
		"MaxLength": "16",
		"AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
		"ConstraintDescription": "Name of Subnet must be valid. Minimum 5 and Maximum of 16 characters",
		"Default": "NewSubnet",
		"Description": "Name of Subnet",
		"Type": "String"
	},
	"SubnetCIDR": {
      "Description": "Subnet CIDR block.",
      "Type": "String",
      "Default": "10.0.1.1/16",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x and subnet of VPC."
    },
	"VpcName": {
	  "MinLength": "5",
	  "MaxLength": "16",
	  "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "Name of VPC must be valid. Minimum 5 and Maximum of 16 characters",
      "Default": "NewVPC",
      "Description": "Name of VPC",
      "Type": "String"
	},
	
	"VPCCreationMode" : {
		"Description" : "Environment type.",
		"Default" : "Create with Default VPC and Subnet",
		"Type" : "String",
		"AllowedValues" : ["Create New VPC and Subnet", "Use Existing VPC and Subnet","Create with Default VPC and Subnet"],
		"ConstraintDescription" : "must specify ec2 instance creation with default/existing/new vpc."
	}
  },
  "Conditions" : {
    "IsPublicImage":{"Fn::Equals":[{"Ref":"ImageType"},"Public"]},
		"UseNewVPCAndSubnet" : {"Fn::Equals" : [{"Ref" : "VPCCreationMode"}, "Create New VPC and Subnet"]},
		"UseExistingVPCAndSubnet" : {"Fn::Equals" : [{"Ref" : "VPCCreationMode"}, "Use Existing VPC and Subnet"]},
		"UseDefaultVPCAndSubnet" : {"Fn::Equals" : [{"Ref" : "VPCCreationMode"}, "Create with Default VPC and Subnet"]}
	},

  
  "Resources" : {
    "EC2InstanceWithExistingVPC" : {
      "Type" : "AWS::EC2::Instance",
	  "Condition" : "UseExistingVPCAndSubnet",
      "Properties" : {
        "InstanceType" : { "Ref" : "instanceType" },
        "SecurityGroupIds" : [{ "Ref" : "securityGroupIds" }] ,
        "KeyName" : { "Ref" : "sshKeyName" },
        "ImageId" : {"Fn::If": ["IsPublicImage" ,{ "Ref" : "publicImageId"},{ "Ref" : "imageId"}]},
        "Tags" : [
            {"Key" : "Name", "Value" : {"Ref": "resourceName"}}
         ],
		"BlockDeviceMappings" : [
			{
			   "DeviceName" : {"Ref" : "deviceName"},
			   "Ebs" : {
			   "VolumeType" : {"Ref" : "volumeType"},
			   "Iops" : "200",
			   "DeleteOnTermination" : {"Ref" : "deleteOnTermination"},
			   "VolumeSize" : {"Ref" : "ebsVolume"}
				}
			}
		],
		"AvailabilityZone" : { "Ref" : "availabilityZone" },
		"SubnetId": { "Ref": "mySubnetIDs"}
      }
    },
	
	"EC2InstanceWithDefault" : {
      "Type" : "AWS::EC2::Instance",
	  "Condition" : "UseDefaultVPCAndSubnet",
      "Properties" : {
        "InstanceType" : { "Ref" : "instanceType" },
        "KeyName" : { "Ref" : "sshKeyName" },
        "ImageId" : {"Fn::If": ["IsPublicImage" ,{ "Ref" : "publicImageId"},{ "Ref" : "imageId"}]},
        "Tags" : [
            {"Key" : "Name", "Value" : {"Ref": "resourceName"}}
         ],
		"AvailabilityZone" : { "Ref" : "availabilityZone" }
      }
    },
	
    "EC2InstanceWithNewVPC" : {
      "Type" : "AWS::EC2::Instance",
	  "Condition" : "UseNewVPCAndSubnet",
      "Properties" : {
        "ImageId" : {"Fn::If": ["IsPublicImage" ,{ "Ref" : "publicImageId"},{ "Ref" : "imageId"}]},
        "InstanceType" : { "Ref" : "instanceType" },
        "KeyName" : { "Ref" : "sshKeyName" },
        "Tags" : [ {"Key" : "Name", "Value" : { "Ref" : "resourceName"} } ],
		"NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "InstanceSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "PublicSubnet1" }
        }],
		"AvailabilityZone" : { "Ref" : "availabilityZone" }
	 }
   },
	
    "VPC": {
		"Type": "AWS::EC2::VPC",
		"Condition" : "UseNewVPCAndSubnet",
        "Properties": {
			"EnableDnsSupport": { "Ref" : "EnableDnsSupport" },
			"EnableDnsHostnames": { "Ref" : "EnableDnsHostnames" },
			"InstanceTenancy": { "Ref" : "InstanceTenancy" },
			"CidrBlock": { "Ref": "VPCCIDR" },
            "Tags": [
				{ "Key" : "Network", 
				  "Value" : "Public" 
				},
				{ "Key": "Name", 
				  "Value": { "Fn::Join": ["", [ "VPC ", {"Ref": "VPCCIDR"}]]}
                },
                { "Key": "CloudFormationStack",
				  "Value": { "Ref": "AWS::StackId" }
                }
              ]
            }
        },

	"PublicSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
	  "Condition" : "UseNewVPCAndSubnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : {"Ref" : "PublicSubnetCIDR"},
        "AvailabilityZone": {"Ref" : "availabilityZone"},
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Network", "Value" : "Public" },
		  {"Key" : "Name", "Value" : { "Ref" : "SubnetName"} }
        ]
      }
    },

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
	  "Condition" : "UseNewVPCAndSubnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Enable SSH access via port 22",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"}
         ]
      }
    }
  },

  "Outputs" : {
    "InstanceId" : {
      "Description" : "InstanceId of the newly created EC2 instance",
      "Value" : {
				 "Fn::If" : 
						[
						 "UseDefaultVPCAndSubnet", { "Ref" : "EC2InstanceWithDefault" }, {
						   "Fn::If" : 
							["UseExistingVPCAndSubnet",{ "Ref" : "EC2InstanceWithExistingVPC" },{
								"Fn::If" : 
								["UseNewVPCAndSubnet",{ "Ref" : "EC2InstanceWithNewVPC" },"EC2InstanceWithDefault"]}
							]
						  }
						]
				  
		}
    },
	"AZ" : {
      "Description" : "Availability Zone of the newly created EC2 instance",
      "Value" : 
				 {
				 "Fn::If" : 
						[
						 "UseDefaultVPCAndSubnet", { "Fn::GetAtt" : [ "EC2InstanceWithDefault", "AvailabilityZone" ]}, {
						   "Fn::If" : 
							["UseExistingVPCAndSubnet",{ "Fn::GetAtt" : [ "EC2InstanceWithExistingVPC", "AvailabilityZone" ]},{
								"Fn::If" : 
								["UseNewVPCAndSubnet",{ "Fn::GetAtt" : [ "EC2InstanceWithNewVPC", "AvailabilityZone" ]},"EC2InstanceWithDefault"]}
							]
						  }
						]
				}
    
  },
  "PublicIP" : {
      "Description" : "Public IP address of the newly created EC2 instance",
      "Value" : 
				 {
				 "Fn::If" : 
						[
						 "UseDefaultVPCAndSubnet", { "Fn::GetAtt" : [ "EC2InstanceWithDefault", "PublicIp" ]}, {
						   "Fn::If" : 
							["UseExistingVPCAndSubnet",{ "Fn::GetAtt" : [ "EC2InstanceWithExistingVPC", "PublicIp" ]},{
								"Fn::If" : 
								["UseNewVPCAndSubnet",{ "Fn::GetAtt" : [ "EC2InstanceWithNewVPC", "PublicIp" ]},"EC2InstanceWithDefault"]}
							]
						  }
						]
				}
    
  }
 }
}
